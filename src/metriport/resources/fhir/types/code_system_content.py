# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class CodeSystemContent(str, enum.Enum):
    """
    The extent of the content of the code system (the concepts and codes it defines) are represented in this resource instance.
    """

    NOT_PRESENT = "not-present"
    EXAMPLE = "example"
    FRAGMENT = "fragment"
    COMPLETE = "complete"
    SUPPLEMENT = "supplement"

    def visit(
        self,
        not_present: typing.Callable[[], T_Result],
        example: typing.Callable[[], T_Result],
        fragment: typing.Callable[[], T_Result],
        complete: typing.Callable[[], T_Result],
        supplement: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is CodeSystemContent.NOT_PRESENT:
            return not_present()
        if self is CodeSystemContent.EXAMPLE:
            return example()
        if self is CodeSystemContent.FRAGMENT:
            return fragment()
        if self is CodeSystemContent.COMPLETE:
            return complete()
        if self is CodeSystemContent.SUPPLEMENT:
            return supplement()
