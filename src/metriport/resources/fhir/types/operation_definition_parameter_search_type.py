# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class OperationDefinitionParameterSearchType(str, enum.Enum):
    """
    How the parameter is understood as a search parameter. This is only used if the parameter type is 'string'.
    """

    NUMBER = "number"
    DATE = "date"
    STRING = "string"
    TOKEN = "token"
    REFERENCE = "reference"
    COMPOSITE = "composite"
    QUANTITY = "quantity"
    URI = "uri"
    SPECIAL = "special"

    def visit(
        self,
        number: typing.Callable[[], T_Result],
        date: typing.Callable[[], T_Result],
        string: typing.Callable[[], T_Result],
        token: typing.Callable[[], T_Result],
        reference: typing.Callable[[], T_Result],
        composite: typing.Callable[[], T_Result],
        quantity: typing.Callable[[], T_Result],
        uri: typing.Callable[[], T_Result],
        special: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is OperationDefinitionParameterSearchType.NUMBER:
            return number()
        if self is OperationDefinitionParameterSearchType.DATE:
            return date()
        if self is OperationDefinitionParameterSearchType.STRING:
            return string()
        if self is OperationDefinitionParameterSearchType.TOKEN:
            return token()
        if self is OperationDefinitionParameterSearchType.REFERENCE:
            return reference()
        if self is OperationDefinitionParameterSearchType.COMPOSITE:
            return composite()
        if self is OperationDefinitionParameterSearchType.QUANTITY:
            return quantity()
        if self is OperationDefinitionParameterSearchType.URI:
            return uri()
        if self is OperationDefinitionParameterSearchType.SPECIAL:
            return special()
