# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class PlanDefinitionActionRequiredBehavior(str, enum.Enum):
    """
    Defines the required behavior for the action.
    """

    MUST = "must"
    COULD = "could"
    MUST_UNLESS_DOCUMENTED = "must-unless-documented"

    def visit(
        self,
        must: typing.Callable[[], T_Result],
        could: typing.Callable[[], T_Result],
        must_unless_documented: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is PlanDefinitionActionRequiredBehavior.MUST:
            return must()
        if self is PlanDefinitionActionRequiredBehavior.COULD:
            return could()
        if self is PlanDefinitionActionRequiredBehavior.MUST_UNLESS_DOCUMENTED:
            return must_unless_documented()
