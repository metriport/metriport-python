# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class SearchParameterModifierItem(str, enum.Enum):
    MISSING = "missing"
    EXACT = "exact"
    CONTAINS = "contains"
    NOT = "not"
    TEXT = "text"
    IN = "in"
    NOT_IN = "not-in"
    BELOW = "below"
    ABOVE = "above"
    TYPE = "type"
    IDENTIFIER = "identifier"
    OF_TYPE = "ofType"

    def visit(
        self,
        missing: typing.Callable[[], T_Result],
        exact: typing.Callable[[], T_Result],
        contains: typing.Callable[[], T_Result],
        not_: typing.Callable[[], T_Result],
        text: typing.Callable[[], T_Result],
        in_: typing.Callable[[], T_Result],
        not_in: typing.Callable[[], T_Result],
        below: typing.Callable[[], T_Result],
        above: typing.Callable[[], T_Result],
        type: typing.Callable[[], T_Result],
        identifier: typing.Callable[[], T_Result],
        of_type: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is SearchParameterModifierItem.MISSING:
            return missing()
        if self is SearchParameterModifierItem.EXACT:
            return exact()
        if self is SearchParameterModifierItem.CONTAINS:
            return contains()
        if self is SearchParameterModifierItem.NOT:
            return not_()
        if self is SearchParameterModifierItem.TEXT:
            return text()
        if self is SearchParameterModifierItem.IN:
            return in_()
        if self is SearchParameterModifierItem.NOT_IN:
            return not_in()
        if self is SearchParameterModifierItem.BELOW:
            return below()
        if self is SearchParameterModifierItem.ABOVE:
            return above()
        if self is SearchParameterModifierItem.TYPE:
            return type()
        if self is SearchParameterModifierItem.IDENTIFIER:
            return identifier()
        if self is SearchParameterModifierItem.OF_TYPE:
            return of_type()
