# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class PlanDefinitionRelatedActionRelationship(str, enum.Enum):
    """
    The relationship of this action to the related action.
    """

    BEFORE_START = "before-start"
    BEFORE = "before"
    BEFORE_END = "before-end"
    CONCURRENT_WITH_START = "concurrent-with-start"
    CONCURRENT = "concurrent"
    CONCURRENT_WITH_END = "concurrent-with-end"
    AFTER_START = "after-start"
    AFTER = "after"
    AFTER_END = "after-end"

    def visit(
        self,
        before_start: typing.Callable[[], T_Result],
        before: typing.Callable[[], T_Result],
        before_end: typing.Callable[[], T_Result],
        concurrent_with_start: typing.Callable[[], T_Result],
        concurrent: typing.Callable[[], T_Result],
        concurrent_with_end: typing.Callable[[], T_Result],
        after_start: typing.Callable[[], T_Result],
        after: typing.Callable[[], T_Result],
        after_end: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is PlanDefinitionRelatedActionRelationship.BEFORE_START:
            return before_start()
        if self is PlanDefinitionRelatedActionRelationship.BEFORE:
            return before()
        if self is PlanDefinitionRelatedActionRelationship.BEFORE_END:
            return before_end()
        if self is PlanDefinitionRelatedActionRelationship.CONCURRENT_WITH_START:
            return concurrent_with_start()
        if self is PlanDefinitionRelatedActionRelationship.CONCURRENT:
            return concurrent()
        if self is PlanDefinitionRelatedActionRelationship.CONCURRENT_WITH_END:
            return concurrent_with_end()
        if self is PlanDefinitionRelatedActionRelationship.AFTER_START:
            return after_start()
        if self is PlanDefinitionRelatedActionRelationship.AFTER:
            return after()
        if self is PlanDefinitionRelatedActionRelationship.AFTER_END:
            return after_end()
