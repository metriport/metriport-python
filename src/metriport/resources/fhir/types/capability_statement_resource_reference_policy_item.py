# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class CapabilityStatementResourceReferencePolicyItem(str, enum.Enum):
    LITERAL = "literal"
    LOGICAL = "logical"
    RESOLVES = "resolves"
    ENFORCED = "enforced"
    LOCAL = "local"

    def visit(
        self,
        literal: typing.Callable[[], T_Result],
        logical: typing.Callable[[], T_Result],
        resolves: typing.Callable[[], T_Result],
        enforced: typing.Callable[[], T_Result],
        local: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is CapabilityStatementResourceReferencePolicyItem.LITERAL:
            return literal()
        if self is CapabilityStatementResourceReferencePolicyItem.LOGICAL:
            return logical()
        if self is CapabilityStatementResourceReferencePolicyItem.RESOLVES:
            return resolves()
        if self is CapabilityStatementResourceReferencePolicyItem.ENFORCED:
            return enforced()
        if self is CapabilityStatementResourceReferencePolicyItem.LOCAL:
            return local()
