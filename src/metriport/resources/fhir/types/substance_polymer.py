# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import typing_extensions

from ....core.datetime_utils import serialize_datetime
from .base_resource import BaseResource
from .codeable_concept import CodeableConcept
from .substance_polymer_monomer_set import SubstancePolymerMonomerSet
from .substance_polymer_repeat import SubstancePolymerRepeat

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class SubstancePolymer(BaseResource):
    """
    Todo.
    """

    resource_type: typing_extensions.Literal["SubstancePolymer"] = pydantic.Field(alias="resourceType")
    class_: typing.Optional[CodeableConcept] = pydantic.Field(alias="class", description="Todo.")
    geometry: typing.Optional[CodeableConcept] = pydantic.Field(description="Todo.")
    copolymer_connectivity: typing.Optional[typing.List[CodeableConcept]] = pydantic.Field(
        alias="copolymerConnectivity", description="Todo."
    )
    modification: typing.Optional[typing.List[str]] = pydantic.Field(description="Todo.")
    monomer_set: typing.Optional[typing.List[SubstancePolymerMonomerSet]] = pydantic.Field(
        alias="monomerSet", description="Todo."
    )
    repeat: typing.Optional[typing.List[SubstancePolymerRepeat]] = pydantic.Field(description="Todo.")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
