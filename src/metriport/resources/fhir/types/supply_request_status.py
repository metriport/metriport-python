# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class SupplyRequestStatus(str, enum.Enum):
    """
    Status of the supply request.
    """

    DRAFT = "draft"
    ACTIVE = "active"
    SUSPENDED = "suspended"
    CANCELLED = "cancelled"
    COMPLETED = "completed"
    ENTERED_IN_ERROR = "entered-in-error"
    UNKNOWN = "unknown"

    def visit(
        self,
        draft: typing.Callable[[], T_Result],
        active: typing.Callable[[], T_Result],
        suspended: typing.Callable[[], T_Result],
        cancelled: typing.Callable[[], T_Result],
        completed: typing.Callable[[], T_Result],
        entered_in_error: typing.Callable[[], T_Result],
        unknown: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is SupplyRequestStatus.DRAFT:
            return draft()
        if self is SupplyRequestStatus.ACTIVE:
            return active()
        if self is SupplyRequestStatus.SUSPENDED:
            return suspended()
        if self is SupplyRequestStatus.CANCELLED:
            return cancelled()
        if self is SupplyRequestStatus.COMPLETED:
            return completed()
        if self is SupplyRequestStatus.ENTERED_IN_ERROR:
            return entered_in_error()
        if self is SupplyRequestStatus.UNKNOWN:
            return unknown()
