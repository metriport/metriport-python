# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class PaymentReconciliationOutcome(str, enum.Enum):
    """
    The outcome of a request for a reconciliation.
    """

    QUEUED = "queued"
    COMPLETE = "complete"
    ERROR = "error"
    PARTIAL = "partial"

    def visit(
        self,
        queued: typing.Callable[[], T_Result],
        complete: typing.Callable[[], T_Result],
        error: typing.Callable[[], T_Result],
        partial: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is PaymentReconciliationOutcome.QUEUED:
            return queued()
        if self is PaymentReconciliationOutcome.COMPLETE:
            return complete()
        if self is PaymentReconciliationOutcome.ERROR:
            return error()
        if self is PaymentReconciliationOutcome.PARTIAL:
            return partial()
