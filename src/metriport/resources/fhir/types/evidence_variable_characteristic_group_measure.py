# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class EvidenceVariableCharacteristicGroupMeasure(str, enum.Enum):
    """
    Indicates how elements are aggregated within the study effective period.
    """

    MEAN = "mean"
    MEDIAN = "median"
    MEAN_OF_MEAN = "mean-of-mean"
    MEAN_OF_MEDIAN = "mean-of-median"
    MEDIAN_OF_MEAN = "median-of-mean"
    MEDIAN_OF_MEDIAN = "median-of-median"

    def visit(
        self,
        mean: typing.Callable[[], T_Result],
        median: typing.Callable[[], T_Result],
        mean_of_mean: typing.Callable[[], T_Result],
        mean_of_median: typing.Callable[[], T_Result],
        median_of_mean: typing.Callable[[], T_Result],
        median_of_median: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is EvidenceVariableCharacteristicGroupMeasure.MEAN:
            return mean()
        if self is EvidenceVariableCharacteristicGroupMeasure.MEDIAN:
            return median()
        if self is EvidenceVariableCharacteristicGroupMeasure.MEAN_OF_MEAN:
            return mean_of_mean()
        if self is EvidenceVariableCharacteristicGroupMeasure.MEAN_OF_MEDIAN:
            return mean_of_median()
        if self is EvidenceVariableCharacteristicGroupMeasure.MEDIAN_OF_MEAN:
            return median_of_mean()
        if self is EvidenceVariableCharacteristicGroupMeasure.MEDIAN_OF_MEDIAN:
            return median_of_median()
