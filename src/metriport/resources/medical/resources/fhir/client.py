# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from .....core.api_error import ApiError
from .....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .....core.remove_none_from_dict import remove_none_from_dict
from .types.consolidated_count_response import ConsolidatedCountResponse
from .types.get_consolidated_query_status_response import GetConsolidatedQueryStatusResponse
from .types.start_consolidated_query_response import StartConsolidatedQueryResponse

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class FhirClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def start_consolidated_query(
        self,
        id: str,
        *,
        resources: typing.Optional[str] = None,
        date_from: typing.Optional[str] = None,
        date_to: typing.Optional[str] = None,
    ) -> StartConsolidatedQueryResponse:
        """
        Trigger a consolidated data query for the given patient

        Parameters:
            - id: str. The ID of the Patient.

            - resources: typing.Optional[str]. A comma separated, case sensitive list of resources to be returned.
                                               If none are provided all resources will be included.

            - date_from: typing.Optional[str]. The start date (inclusive) for which to filter returned resources -
                                               formatted `YYYY-MM-DD` as per ISO 8601. If not provided,
                                               no start date filter will be applied.

            - date_to: typing.Optional[str]. The end date (inclusive) for which to filter returned resources -
                                             formatted `YYYY-MM-DD` as per ISO 8601. If not provided,
                                              no end date filter will be applied.
                                             ---
        from metriport.client import Metriport

        client = Metriport(
            api_key="YOUR_API_KEY",
        )
        client.medical.fhir.start_consolidated_query(
            id="12345678",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"medical/v1/patient/{id}/consolidated/query"
            ),
            params=remove_none_from_dict({"resources": resources, "dateFrom": date_from, "dateTo": date_to}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(StartConsolidatedQueryResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_consolidated_query_status(self, id: str) -> GetConsolidatedQueryStatusResponse:
        """
        Get the status of querying for patient's consolidated data.

        Parameters:
            - id: str. The ID of the Patient
        ---
        from metriport.client import Metriport

        client = Metriport(
            api_key="YOUR_API_KEY",
        )
        client.medical.fhir.get_consolidated_query_status(
            id="12345678",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"medical/v1/patient/{id}/consolidated/query"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetConsolidatedQueryStatusResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def count_patient_data(
        self,
        id: str,
        *,
        resources: typing.Optional[str] = None,
        date_from: typing.Optional[str] = None,
        date_to: typing.Optional[str] = None,
    ) -> ConsolidatedCountResponse:
        """
        Get a count of a Patient's data per resource.

        Parameters:
            - id: str. The ID of the Patient

            - resources: typing.Optional[str]. A comma separated, case sensitive list of resources to be returned.
                                               If none are provided all resources will be included.

            - date_from: typing.Optional[str]. The start date (inclusive) for which to filter returned resources -
                                               formatted `YYYY-MM-DD` as per ISO 8601. If not provided,
                                               no start date filter will be applied.

            - date_to: typing.Optional[str]. The end date (inclusive) for which to filter returned resources -
                                             formatted `YYYY-MM-DD` as per ISO 8601. If not provided,
                                              no end date filter will be applied.

        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"medical/v1/patient/{id}/consolidated/count"
            ),
            params=remove_none_from_dict({"resources": resources, "dateFrom": date_from, "dateTo": date_to}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ConsolidatedCountResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncFhirClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def start_consolidated_query(
        self,
        id: str,
        *,
        resources: typing.Optional[str] = None,
        date_from: typing.Optional[str] = None,
        date_to: typing.Optional[str] = None,
    ) -> StartConsolidatedQueryResponse:
        """
        Trigger a consolidated data query for the given patient

        Parameters:
            - id: str. The ID of the Patient.

            - resources: typing.Optional[str]. A comma separated, case sensitive list of resources to be returned.
                                               If none are provided all resources will be included.

            - date_from: typing.Optional[str]. The start date (inclusive) for which to filter returned resources -
                                               formatted `YYYY-MM-DD` as per ISO 8601. If not provided,
                                               no start date filter will be applied.

            - date_to: typing.Optional[str]. The end date (inclusive) for which to filter returned resources -
                                             formatted `YYYY-MM-DD` as per ISO 8601. If not provided,
                                              no end date filter will be applied.
                                             ---
        from metriport.client import AsyncMetriport

        client = AsyncMetriport(
            api_key="YOUR_API_KEY",
        )
        await client.medical.fhir.start_consolidated_query(
            id="12345678",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"medical/v1/patient/{id}/consolidated/query"
            ),
            params=remove_none_from_dict({"resources": resources, "dateFrom": date_from, "dateTo": date_to}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(StartConsolidatedQueryResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_consolidated_query_status(self, id: str) -> GetConsolidatedQueryStatusResponse:
        """
        Get the status of querying for patient's consolidated data.

        Parameters:
            - id: str. The ID of the Patient
        ---
        from metriport.client import AsyncMetriport

        client = AsyncMetriport(
            api_key="YOUR_API_KEY",
        )
        await client.medical.fhir.get_consolidated_query_status(
            id="12345678",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"medical/v1/patient/{id}/consolidated/query"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetConsolidatedQueryStatusResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def count_patient_data(
        self,
        id: str,
        *,
        resources: typing.Optional[str] = None,
        date_from: typing.Optional[str] = None,
        date_to: typing.Optional[str] = None,
    ) -> ConsolidatedCountResponse:
        """
        Get a count of a Patient's data per resource.

        Parameters:
            - id: str. The ID of the Patient

            - resources: typing.Optional[str]. A comma separated, case sensitive list of resources to be returned.
                                               If none are provided all resources will be included.

            - date_from: typing.Optional[str]. The start date (inclusive) for which to filter returned resources -
                                               formatted `YYYY-MM-DD` as per ISO 8601. If not provided,
                                               no start date filter will be applied.

            - date_to: typing.Optional[str]. The end date (inclusive) for which to filter returned resources -
                                             formatted `YYYY-MM-DD` as per ISO 8601. If not provided,
                                              no end date filter will be applied.

        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"medical/v1/patient/{id}/consolidated/count"
            ),
            params=remove_none_from_dict({"resources": resources, "dateFrom": date_from, "dateTo": date_to}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ConsolidatedCountResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
