# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class PlanDefinitionActionSelectionBehavior(str, enum.Enum):
    """
    Defines the selection behavior for the action and its children.
    """

    ANY = "any"
    ALL = "all"
    ALL_OR_NONE = "all-or-none"
    EXACTLY_ONE = "exactly-one"
    AT_MOST_ONE = "at-most-one"
    ONE_OR_MORE = "one-or-more"

    def visit(
        self,
        any: typing.Callable[[], T_Result],
        all: typing.Callable[[], T_Result],
        all_or_none: typing.Callable[[], T_Result],
        exactly_one: typing.Callable[[], T_Result],
        at_most_one: typing.Callable[[], T_Result],
        one_or_more: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is PlanDefinitionActionSelectionBehavior.ANY:
            return any()
        if self is PlanDefinitionActionSelectionBehavior.ALL:
            return all()
        if self is PlanDefinitionActionSelectionBehavior.ALL_OR_NONE:
            return all_or_none()
        if self is PlanDefinitionActionSelectionBehavior.EXACTLY_ONE:
            return exactly_one()
        if self is PlanDefinitionActionSelectionBehavior.AT_MOST_ONE:
            return at_most_one()
        if self is PlanDefinitionActionSelectionBehavior.ONE_OR_MORE:
            return one_or_more()
