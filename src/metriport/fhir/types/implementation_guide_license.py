# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class ImplementationGuideLicense(str, enum.Enum):
    """
    The license that applies to this Implementation Guide, using an SPDX license code, or 'not-open-source'.
    """

    NOT_OPEN_SOURCE = "not-open-source"
    ZERO_BSD = "0BSD"
    AAL = "AAL"
    ABSTYLES = "Abstyles"
    ADOBE_2006 = "Adobe-2006"
    ADOBE_GLYPH = "Adobe-Glyph"
    ADSL = "ADSL"
    AFL_11 = "AFL-1.1"
    AFL_12 = "AFL-1.2"
    AFL_20 = "AFL-2.0"
    AFL_21 = "AFL-2.1"
    AFL_30 = "AFL-3.0"
    AFMPARSE = "Afmparse"
    AGPL_10_ONLY = "AGPL-1.0-only"
    AGPL_10_OR_LATER = "AGPL-1.0-or-later"
    AGPL_30_ONLY = "AGPL-3.0-only"
    AGPL_30_OR_LATER = "AGPL-3.0-or-later"
    ALADDIN = "Aladdin"
    AMDPLPA = "AMDPLPA"
    AML = "AML"
    AMPAS = "AMPAS"
    ANTLR_PD = "ANTLR-PD"
    APACHE_10 = "Apache-1.0"
    APACHE_11 = "Apache-1.1"
    APACHE_20 = "Apache-2.0"
    APAFML = "APAFML"
    APL_10 = "APL-1.0"
    APSL_10 = "APSL-1.0"
    APSL_11 = "APSL-1.1"
    APSL_12 = "APSL-1.2"
    APSL_20 = "APSL-2.0"
    ARTISTIC_10_CL_8 = "Artistic-1.0-cl8"
    ARTISTIC_10_PERL = "Artistic-1.0-Perl"
    ARTISTIC_10 = "Artistic-1.0"
    ARTISTIC_20 = "Artistic-2.0"
    BAHYPH = "Bahyph"
    BARR = "Barr"
    BEERWARE = "Beerware"
    BIT_TORRENT_10 = "BitTorrent-1.0"
    BIT_TORRENT_11 = "BitTorrent-1.1"
    BORCEUX = "Borceux"
    BSD_1_CLAUSE = "BSD-1-Clause"
    BSD_2_CLAUSE_FREE_BSD = "BSD-2-Clause-FreeBSD"
    BSD_2_CLAUSE_NET_BSD = "BSD-2-Clause-NetBSD"
    BSD_2_CLAUSE_PATENT = "BSD-2-Clause-Patent"
    BSD_2_CLAUSE = "BSD-2-Clause"
    BSD_3_CLAUSE_ATTRIBUTION = "BSD-3-Clause-Attribution"
    BSD_3_CLAUSE_CLEAR = "BSD-3-Clause-Clear"
    BSD_3_CLAUSE_LBNL = "BSD-3-Clause-LBNL"
    BSD_3_CLAUSE_NO_NUCLEAR_LICENSE_2014 = "BSD-3-Clause-No-Nuclear-License-2014"
    BSD_3_CLAUSE_NO_NUCLEAR_LICENSE = "BSD-3-Clause-No-Nuclear-License"
    BSD_3_CLAUSE_NO_NUCLEAR_WARRANTY = "BSD-3-Clause-No-Nuclear-Warranty"
    BSD_3_CLAUSE = "BSD-3-Clause"
    BSD_4_CLAUSE_UC = "BSD-4-Clause-UC"
    BSD_4_CLAUSE = "BSD-4-Clause"
    BSD_PROTECTION = "BSD-Protection"
    BSD_SOURCE_CODE = "BSD-Source-Code"
    BSL_10 = "BSL-1.0"
    BZIP_2105 = "bzip2-1.0.5"
    BZIP_2106 = "bzip2-1.0.6"
    CALDERA = "Caldera"
    CATOSL_11 = "CATOSL-1.1"
    CC_BY_10 = "CC-BY-1.0"
    CC_BY_20 = "CC-BY-2.0"
    CC_BY_25 = "CC-BY-2.5"
    CC_BY_30 = "CC-BY-3.0"
    CC_BY_40 = "CC-BY-4.0"
    CC_BY_NC_10 = "CC-BY-NC-1.0"
    CC_BY_NC_20 = "CC-BY-NC-2.0"
    CC_BY_NC_25 = "CC-BY-NC-2.5"
    CC_BY_NC_30 = "CC-BY-NC-3.0"
    CC_BY_NC_40 = "CC-BY-NC-4.0"
    CC_BY_NC_ND_10 = "CC-BY-NC-ND-1.0"
    CC_BY_NC_ND_20 = "CC-BY-NC-ND-2.0"
    CC_BY_NC_ND_25 = "CC-BY-NC-ND-2.5"
    CC_BY_NC_ND_30 = "CC-BY-NC-ND-3.0"
    CC_BY_NC_ND_40 = "CC-BY-NC-ND-4.0"
    CC_BY_NC_SA_10 = "CC-BY-NC-SA-1.0"
    CC_BY_NC_SA_20 = "CC-BY-NC-SA-2.0"
    CC_BY_NC_SA_25 = "CC-BY-NC-SA-2.5"
    CC_BY_NC_SA_30 = "CC-BY-NC-SA-3.0"
    CC_BY_NC_SA_40 = "CC-BY-NC-SA-4.0"
    CC_BY_ND_10 = "CC-BY-ND-1.0"
    CC_BY_ND_20 = "CC-BY-ND-2.0"
    CC_BY_ND_25 = "CC-BY-ND-2.5"
    CC_BY_ND_30 = "CC-BY-ND-3.0"
    CC_BY_ND_40 = "CC-BY-ND-4.0"
    CC_BY_SA_10 = "CC-BY-SA-1.0"
    CC_BY_SA_20 = "CC-BY-SA-2.0"
    CC_BY_SA_25 = "CC-BY-SA-2.5"
    CC_BY_SA_30 = "CC-BY-SA-3.0"
    CC_BY_SA_40 = "CC-BY-SA-4.0"
    CC_010 = "CC0-1.0"
    CDDL_10 = "CDDL-1.0"
    CDDL_11 = "CDDL-1.1"
    CDLA_PERMISSIVE_10 = "CDLA-Permissive-1.0"
    CDLA_SHARING_10 = "CDLA-Sharing-1.0"
    CECILL_10 = "CECILL-1.0"
    CECILL_11 = "CECILL-1.1"
    CECILL_20 = "CECILL-2.0"
    CECILL_21 = "CECILL-2.1"
    CECILL_B = "CECILL-B"
    CECILL_C = "CECILL-C"
    CL_ARTISTIC = "ClArtistic"
    CNRI_JYTHON = "CNRI-Jython"
    CNRI_PYTHON_GPL_COMPATIBLE = "CNRI-Python-GPL-Compatible"
    CNRI_PYTHON = "CNRI-Python"
    CONDOR_11 = "Condor-1.1"
    CPAL_10 = "CPAL-1.0"
    CPL_10 = "CPL-1.0"
    CPOL_102 = "CPOL-1.02"
    CROSSWORD = "Crossword"
    CRYSTAL_STACKER = "CrystalStacker"
    CUA_OPL_10 = "CUA-OPL-1.0"
    CUBE = "Cube"
    CURL = "curl"
    D_FSL_10 = "D-FSL-1.0"
    DIFFMARK = "diffmark"
    DOC = "DOC"
    DOTSEQN = "Dotseqn"
    DSDP = "DSDP"
    DVIPDFM = "dvipdfm"
    ECL_10 = "ECL-1.0"
    ECL_20 = "ECL-2.0"
    EFL_10 = "EFL-1.0"
    EFL_20 = "EFL-2.0"
    E_GENIX = "eGenix"
    ENTESSA = "Entessa"
    EPL_10 = "EPL-1.0"
    EPL_20 = "EPL-2.0"
    ERL_PL_11 = "ErlPL-1.1"
    EU_DATAGRID = "EUDatagrid"
    EUPL_10 = "EUPL-1.0"
    EUPL_11 = "EUPL-1.1"
    EUPL_12 = "EUPL-1.2"
    EUROSYM = "Eurosym"
    FAIR = "Fair"
    FRAMEWORX_10 = "Frameworx-1.0"
    FREE_IMAGE = "FreeImage"
    FSFAP = "FSFAP"
    FSFUL = "FSFUL"
    FSFULLR = "FSFULLR"
    FTL = "FTL"
    GFDL_11_ONLY = "GFDL-1.1-only"
    GFDL_11_OR_LATER = "GFDL-1.1-or-later"
    GFDL_12_ONLY = "GFDL-1.2-only"
    GFDL_12_OR_LATER = "GFDL-1.2-or-later"
    GFDL_13_ONLY = "GFDL-1.3-only"
    GFDL_13_OR_LATER = "GFDL-1.3-or-later"
    GIFTWARE = "Giftware"
    GL_2_PS = "GL2PS"
    GLIDE = "Glide"
    GLULXE = "Glulxe"
    GNUPLOT = "gnuplot"
    GPL_10_ONLY = "GPL-1.0-only"
    GPL_10_OR_LATER = "GPL-1.0-or-later"
    GPL_20_ONLY = "GPL-2.0-only"
    GPL_20_OR_LATER = "GPL-2.0-or-later"
    GPL_30_ONLY = "GPL-3.0-only"
    GPL_30_OR_LATER = "GPL-3.0-or-later"
    G_SOAP_13_B = "gSOAP-1.3b"
    HASKELL_REPORT = "HaskellReport"
    HPND = "HPND"
    IBM_PIBS = "IBM-pibs"
    ICU = "ICU"
    IJG = "IJG"
    IMAGE_MAGICK = "ImageMagick"
    I_MATIX = "iMatix"
    IMLIB_2 = "Imlib2"
    INFO_ZIP = "Info-ZIP"
    INTEL_ACPI = "Intel-ACPI"
    INTEL = "Intel"
    INTERBASE_10 = "Interbase-1.0"
    IPA = "IPA"
    IPL_10 = "IPL-1.0"
    ISC = "ISC"
    JAS_PER_20 = "JasPer-2.0"
    JSON = "JSON"
    LAL_12 = "LAL-1.2"
    LAL_13 = "LAL-1.3"
    LATEX_2_E = "Latex2e"
    LEPTONICA = "Leptonica"
    LGPL_20_ONLY = "LGPL-2.0-only"
    LGPL_20_OR_LATER = "LGPL-2.0-or-later"
    LGPL_21_ONLY = "LGPL-2.1-only"
    LGPL_21_OR_LATER = "LGPL-2.1-or-later"
    LGPL_30_ONLY = "LGPL-3.0-only"
    LGPL_30_OR_LATER = "LGPL-3.0-or-later"
    LGPLLR = "LGPLLR"
    LIBPNG = "Libpng"
    LIBTIFF = "libtiff"
    LI_LI_QP_11 = "LiLiQ-P-1.1"
    LI_LI_QR_11 = "LiLiQ-R-1.1"
    LI_LI_Q_RPLUS_11 = "LiLiQ-Rplus-1.1"
    LINUX_OPEN_IB = "Linux-OpenIB"
    LPL_10 = "LPL-1.0"
    LPL_102 = "LPL-1.02"
    LPPL_10 = "LPPL-1.0"
    LPPL_11 = "LPPL-1.1"
    LPPL_12 = "LPPL-1.2"
    LPPL_13_A = "LPPL-1.3a"
    LPPL_13_C = "LPPL-1.3c"
    MAKE_INDEX = "MakeIndex"
    MIR_OS = "MirOS"
    MIT_0 = "MIT-0"
    MIT_ADVERTISING = "MIT-advertising"
    MIT_CMU = "MIT-CMU"
    MIT_ENNA = "MIT-enna"
    MIT_FEH = "MIT-feh"
    MIT = "MIT"
    MITNFA = "MITNFA"
    MOTOSOTO = "Motosoto"
    MPICH_2 = "mpich2"
    MPL_10 = "MPL-1.0"
    MPL_11 = "MPL-1.1"
    MPL_20_NO_COPYLEFT_EXCEPTION = "MPL-2.0-no-copyleft-exception"
    MPL_20 = "MPL-2.0"
    MS_PL = "MS-PL"
    MS_RL = "MS-RL"
    MTLL = "MTLL"
    MULTICS = "Multics"
    MUP = "Mup"
    NASA_13 = "NASA-1.3"
    NAUMEN = "Naumen"
    NBPL_10 = "NBPL-1.0"
    NCSA = "NCSA"
    NET_SNMP = "Net-SNMP"
    NET_CDF = "NetCDF"
    NEWSLETR = "Newsletr"
    NGPL = "NGPL"
    NLOD_10 = "NLOD-1.0"
    NLPL = "NLPL"
    NOKIA = "Nokia"
    NOSL = "NOSL"
    NOWEB = "Noweb"
    NPL_10 = "NPL-1.0"
    NPL_11 = "NPL-1.1"
    NPOSL_30 = "NPOSL-3.0"
    NRL = "NRL"
    NTP = "NTP"
    OCCT_PL = "OCCT-PL"
    OCLC_20 = "OCLC-2.0"
    O_DB_L_10 = "ODbL-1.0"
    OFL_10 = "OFL-1.0"
    OFL_11 = "OFL-1.1"
    OGTSL = "OGTSL"
    OLDAP_11 = "OLDAP-1.1"
    OLDAP_12 = "OLDAP-1.2"
    OLDAP_13 = "OLDAP-1.3"
    OLDAP_14 = "OLDAP-1.4"
    OLDAP_201 = "OLDAP-2.0.1"
    OLDAP_20 = "OLDAP-2.0"
    OLDAP_21 = "OLDAP-2.1"
    OLDAP_221 = "OLDAP-2.2.1"
    OLDAP_222 = "OLDAP-2.2.2"
    OLDAP_22 = "OLDAP-2.2"
    OLDAP_23 = "OLDAP-2.3"
    OLDAP_24 = "OLDAP-2.4"
    OLDAP_25 = "OLDAP-2.5"
    OLDAP_26 = "OLDAP-2.6"
    OLDAP_27 = "OLDAP-2.7"
    OLDAP_28 = "OLDAP-2.8"
    OML = "OML"
    OPEN_SSL = "OpenSSL"
    OPL_10 = "OPL-1.0"
    OSET_PL_21 = "OSET-PL-2.1"
    OSL_10 = "OSL-1.0"
    OSL_11 = "OSL-1.1"
    OSL_20 = "OSL-2.0"
    OSL_21 = "OSL-2.1"
    OSL_30 = "OSL-3.0"
    PDDL_10 = "PDDL-1.0"
    PHP_30 = "PHP-3.0"
    PHP_301 = "PHP-3.01"
    PLEXUS = "Plexus"
    POSTGRE_SQL = "PostgreSQL"
    PSFRAG = "psfrag"
    PSUTILS = "psutils"
    PYTHON_20 = "Python-2.0"
    QHULL = "Qhull"
    QPL_10 = "QPL-1.0"
    RDISC = "Rdisc"
    R_HE_COS_11 = "RHeCos-1.1"
    RPL_11 = "RPL-1.1"
    RPL_15 = "RPL-1.5"
    RPSL_10 = "RPSL-1.0"
    RSA_MD = "RSA-MD"
    RSCPL = "RSCPL"
    RUBY = "Ruby"
    SAX_PD = "SAX-PD"
    SAXPATH = "Saxpath"
    SCEA = "SCEA"
    SENDMAIL = "Sendmail"
    SGI_B_10 = "SGI-B-1.0"
    SGI_B_11 = "SGI-B-1.1"
    SGI_B_20 = "SGI-B-2.0"
    SIM_PL_20 = "SimPL-2.0"
    SISSL_12 = "SISSL-1.2"
    SISSL = "SISSL"
    SLEEPYCAT = "Sleepycat"
    SMLNJ = "SMLNJ"
    SMPPL = "SMPPL"
    SNIA = "SNIA"
    SPENCER_86 = "Spencer-86"
    SPENCER_94 = "Spencer-94"
    SPENCER_99 = "Spencer-99"
    SPL_10 = "SPL-1.0"
    SUGAR_CRM_113 = "SugarCRM-1.1.3"
    SWL = "SWL"
    TCL = "TCL"
    TCP_WRAPPERS = "TCP-wrappers"
    T_MATE = "TMate"
    TORQUE_11 = "TORQUE-1.1"
    TOSL = "TOSL"
    UNICODE_DFS_2015 = "Unicode-DFS-2015"
    UNICODE_DFS_2016 = "Unicode-DFS-2016"
    UNICODE_TOU = "Unicode-TOU"
    UNLICENSE = "Unlicense"
    UPL_10 = "UPL-1.0"
    VIM = "Vim"
    VOSTROM = "VOSTROM"
    VSL_10 = "VSL-1.0"
    W_3_C_19980720 = "W3C-19980720"
    W_3_C_20150513 = "W3C-20150513"
    W_3_C = "W3C"
    WATCOM_10 = "Watcom-1.0"
    WSUIPA = "Wsuipa"
    WTFPL = "WTFPL"
    X_11 = "X11"
    XEROX = "Xerox"
    X_FREE_8611 = "XFree86-1.1"
    XINETD = "xinetd"
    XNET = "Xnet"
    XPP = "xpp"
    X_SKAT = "XSkat"
    YPL_10 = "YPL-1.0"
    YPL_11 = "YPL-1.1"
    ZED = "Zed"
    ZEND_20 = "Zend-2.0"
    ZIMBRA_13 = "Zimbra-1.3"
    ZIMBRA_14 = "Zimbra-1.4"
    ZLIB_ACKNOWLEDGEMENT = "zlib-acknowledgement"
    ZLIB = "Zlib"
    ZPL_11 = "ZPL-1.1"
    ZPL_20 = "ZPL-2.0"
    ZPL_21 = "ZPL-2.1"

    def visit(
        self,
        not_open_source: typing.Callable[[], T_Result],
        zero_bsd: typing.Callable[[], T_Result],
        aal: typing.Callable[[], T_Result],
        abstyles: typing.Callable[[], T_Result],
        adobe_2006: typing.Callable[[], T_Result],
        adobe_glyph: typing.Callable[[], T_Result],
        adsl: typing.Callable[[], T_Result],
        afl_11: typing.Callable[[], T_Result],
        afl_12: typing.Callable[[], T_Result],
        afl_20: typing.Callable[[], T_Result],
        afl_21: typing.Callable[[], T_Result],
        afl_30: typing.Callable[[], T_Result],
        afmparse: typing.Callable[[], T_Result],
        agpl_10_only: typing.Callable[[], T_Result],
        agpl_10_or_later: typing.Callable[[], T_Result],
        agpl_30_only: typing.Callable[[], T_Result],
        agpl_30_or_later: typing.Callable[[], T_Result],
        aladdin: typing.Callable[[], T_Result],
        amdplpa: typing.Callable[[], T_Result],
        aml: typing.Callable[[], T_Result],
        ampas: typing.Callable[[], T_Result],
        antlr_pd: typing.Callable[[], T_Result],
        apache_10: typing.Callable[[], T_Result],
        apache_11: typing.Callable[[], T_Result],
        apache_20: typing.Callable[[], T_Result],
        apafml: typing.Callable[[], T_Result],
        apl_10: typing.Callable[[], T_Result],
        apsl_10: typing.Callable[[], T_Result],
        apsl_11: typing.Callable[[], T_Result],
        apsl_12: typing.Callable[[], T_Result],
        apsl_20: typing.Callable[[], T_Result],
        artistic_10_cl_8: typing.Callable[[], T_Result],
        artistic_10_perl: typing.Callable[[], T_Result],
        artistic_10: typing.Callable[[], T_Result],
        artistic_20: typing.Callable[[], T_Result],
        bahyph: typing.Callable[[], T_Result],
        barr: typing.Callable[[], T_Result],
        beerware: typing.Callable[[], T_Result],
        bit_torrent_10: typing.Callable[[], T_Result],
        bit_torrent_11: typing.Callable[[], T_Result],
        borceux: typing.Callable[[], T_Result],
        bsd_1_clause: typing.Callable[[], T_Result],
        bsd_2_clause_free_bsd: typing.Callable[[], T_Result],
        bsd_2_clause_net_bsd: typing.Callable[[], T_Result],
        bsd_2_clause_patent: typing.Callable[[], T_Result],
        bsd_2_clause: typing.Callable[[], T_Result],
        bsd_3_clause_attribution: typing.Callable[[], T_Result],
        bsd_3_clause_clear: typing.Callable[[], T_Result],
        bsd_3_clause_lbnl: typing.Callable[[], T_Result],
        bsd_3_clause_no_nuclear_license_2014: typing.Callable[[], T_Result],
        bsd_3_clause_no_nuclear_license: typing.Callable[[], T_Result],
        bsd_3_clause_no_nuclear_warranty: typing.Callable[[], T_Result],
        bsd_3_clause: typing.Callable[[], T_Result],
        bsd_4_clause_uc: typing.Callable[[], T_Result],
        bsd_4_clause: typing.Callable[[], T_Result],
        bsd_protection: typing.Callable[[], T_Result],
        bsd_source_code: typing.Callable[[], T_Result],
        bsl_10: typing.Callable[[], T_Result],
        bzip_2105: typing.Callable[[], T_Result],
        bzip_2106: typing.Callable[[], T_Result],
        caldera: typing.Callable[[], T_Result],
        catosl_11: typing.Callable[[], T_Result],
        cc_by_10: typing.Callable[[], T_Result],
        cc_by_20: typing.Callable[[], T_Result],
        cc_by_25: typing.Callable[[], T_Result],
        cc_by_30: typing.Callable[[], T_Result],
        cc_by_40: typing.Callable[[], T_Result],
        cc_by_nc_10: typing.Callable[[], T_Result],
        cc_by_nc_20: typing.Callable[[], T_Result],
        cc_by_nc_25: typing.Callable[[], T_Result],
        cc_by_nc_30: typing.Callable[[], T_Result],
        cc_by_nc_40: typing.Callable[[], T_Result],
        cc_by_nc_nd_10: typing.Callable[[], T_Result],
        cc_by_nc_nd_20: typing.Callable[[], T_Result],
        cc_by_nc_nd_25: typing.Callable[[], T_Result],
        cc_by_nc_nd_30: typing.Callable[[], T_Result],
        cc_by_nc_nd_40: typing.Callable[[], T_Result],
        cc_by_nc_sa_10: typing.Callable[[], T_Result],
        cc_by_nc_sa_20: typing.Callable[[], T_Result],
        cc_by_nc_sa_25: typing.Callable[[], T_Result],
        cc_by_nc_sa_30: typing.Callable[[], T_Result],
        cc_by_nc_sa_40: typing.Callable[[], T_Result],
        cc_by_nd_10: typing.Callable[[], T_Result],
        cc_by_nd_20: typing.Callable[[], T_Result],
        cc_by_nd_25: typing.Callable[[], T_Result],
        cc_by_nd_30: typing.Callable[[], T_Result],
        cc_by_nd_40: typing.Callable[[], T_Result],
        cc_by_sa_10: typing.Callable[[], T_Result],
        cc_by_sa_20: typing.Callable[[], T_Result],
        cc_by_sa_25: typing.Callable[[], T_Result],
        cc_by_sa_30: typing.Callable[[], T_Result],
        cc_by_sa_40: typing.Callable[[], T_Result],
        cc_010: typing.Callable[[], T_Result],
        cddl_10: typing.Callable[[], T_Result],
        cddl_11: typing.Callable[[], T_Result],
        cdla_permissive_10: typing.Callable[[], T_Result],
        cdla_sharing_10: typing.Callable[[], T_Result],
        cecill_10: typing.Callable[[], T_Result],
        cecill_11: typing.Callable[[], T_Result],
        cecill_20: typing.Callable[[], T_Result],
        cecill_21: typing.Callable[[], T_Result],
        cecill_b: typing.Callable[[], T_Result],
        cecill_c: typing.Callable[[], T_Result],
        cl_artistic: typing.Callable[[], T_Result],
        cnri_jython: typing.Callable[[], T_Result],
        cnri_python_gpl_compatible: typing.Callable[[], T_Result],
        cnri_python: typing.Callable[[], T_Result],
        condor_11: typing.Callable[[], T_Result],
        cpal_10: typing.Callable[[], T_Result],
        cpl_10: typing.Callable[[], T_Result],
        cpol_102: typing.Callable[[], T_Result],
        crossword: typing.Callable[[], T_Result],
        crystal_stacker: typing.Callable[[], T_Result],
        cua_opl_10: typing.Callable[[], T_Result],
        cube: typing.Callable[[], T_Result],
        curl: typing.Callable[[], T_Result],
        d_fsl_10: typing.Callable[[], T_Result],
        diffmark: typing.Callable[[], T_Result],
        doc: typing.Callable[[], T_Result],
        dotseqn: typing.Callable[[], T_Result],
        dsdp: typing.Callable[[], T_Result],
        dvipdfm: typing.Callable[[], T_Result],
        ecl_10: typing.Callable[[], T_Result],
        ecl_20: typing.Callable[[], T_Result],
        efl_10: typing.Callable[[], T_Result],
        efl_20: typing.Callable[[], T_Result],
        e_genix: typing.Callable[[], T_Result],
        entessa: typing.Callable[[], T_Result],
        epl_10: typing.Callable[[], T_Result],
        epl_20: typing.Callable[[], T_Result],
        erl_pl_11: typing.Callable[[], T_Result],
        eu_datagrid: typing.Callable[[], T_Result],
        eupl_10: typing.Callable[[], T_Result],
        eupl_11: typing.Callable[[], T_Result],
        eupl_12: typing.Callable[[], T_Result],
        eurosym: typing.Callable[[], T_Result],
        fair: typing.Callable[[], T_Result],
        frameworx_10: typing.Callable[[], T_Result],
        free_image: typing.Callable[[], T_Result],
        fsfap: typing.Callable[[], T_Result],
        fsful: typing.Callable[[], T_Result],
        fsfullr: typing.Callable[[], T_Result],
        ftl: typing.Callable[[], T_Result],
        gfdl_11_only: typing.Callable[[], T_Result],
        gfdl_11_or_later: typing.Callable[[], T_Result],
        gfdl_12_only: typing.Callable[[], T_Result],
        gfdl_12_or_later: typing.Callable[[], T_Result],
        gfdl_13_only: typing.Callable[[], T_Result],
        gfdl_13_or_later: typing.Callable[[], T_Result],
        giftware: typing.Callable[[], T_Result],
        gl_2_ps: typing.Callable[[], T_Result],
        glide: typing.Callable[[], T_Result],
        glulxe: typing.Callable[[], T_Result],
        gnuplot: typing.Callable[[], T_Result],
        gpl_10_only: typing.Callable[[], T_Result],
        gpl_10_or_later: typing.Callable[[], T_Result],
        gpl_20_only: typing.Callable[[], T_Result],
        gpl_20_or_later: typing.Callable[[], T_Result],
        gpl_30_only: typing.Callable[[], T_Result],
        gpl_30_or_later: typing.Callable[[], T_Result],
        g_soap_13_b: typing.Callable[[], T_Result],
        haskell_report: typing.Callable[[], T_Result],
        hpnd: typing.Callable[[], T_Result],
        ibm_pibs: typing.Callable[[], T_Result],
        icu: typing.Callable[[], T_Result],
        ijg: typing.Callable[[], T_Result],
        image_magick: typing.Callable[[], T_Result],
        i_matix: typing.Callable[[], T_Result],
        imlib_2: typing.Callable[[], T_Result],
        info_zip: typing.Callable[[], T_Result],
        intel_acpi: typing.Callable[[], T_Result],
        intel: typing.Callable[[], T_Result],
        interbase_10: typing.Callable[[], T_Result],
        ipa: typing.Callable[[], T_Result],
        ipl_10: typing.Callable[[], T_Result],
        isc: typing.Callable[[], T_Result],
        jas_per_20: typing.Callable[[], T_Result],
        json: typing.Callable[[], T_Result],
        lal_12: typing.Callable[[], T_Result],
        lal_13: typing.Callable[[], T_Result],
        latex_2_e: typing.Callable[[], T_Result],
        leptonica: typing.Callable[[], T_Result],
        lgpl_20_only: typing.Callable[[], T_Result],
        lgpl_20_or_later: typing.Callable[[], T_Result],
        lgpl_21_only: typing.Callable[[], T_Result],
        lgpl_21_or_later: typing.Callable[[], T_Result],
        lgpl_30_only: typing.Callable[[], T_Result],
        lgpl_30_or_later: typing.Callable[[], T_Result],
        lgpllr: typing.Callable[[], T_Result],
        libpng: typing.Callable[[], T_Result],
        libtiff: typing.Callable[[], T_Result],
        li_li_qp_11: typing.Callable[[], T_Result],
        li_li_qr_11: typing.Callable[[], T_Result],
        li_li_q_rplus_11: typing.Callable[[], T_Result],
        linux_open_ib: typing.Callable[[], T_Result],
        lpl_10: typing.Callable[[], T_Result],
        lpl_102: typing.Callable[[], T_Result],
        lppl_10: typing.Callable[[], T_Result],
        lppl_11: typing.Callable[[], T_Result],
        lppl_12: typing.Callable[[], T_Result],
        lppl_13_a: typing.Callable[[], T_Result],
        lppl_13_c: typing.Callable[[], T_Result],
        make_index: typing.Callable[[], T_Result],
        mir_os: typing.Callable[[], T_Result],
        mit_0: typing.Callable[[], T_Result],
        mit_advertising: typing.Callable[[], T_Result],
        mit_cmu: typing.Callable[[], T_Result],
        mit_enna: typing.Callable[[], T_Result],
        mit_feh: typing.Callable[[], T_Result],
        mit: typing.Callable[[], T_Result],
        mitnfa: typing.Callable[[], T_Result],
        motosoto: typing.Callable[[], T_Result],
        mpich_2: typing.Callable[[], T_Result],
        mpl_10: typing.Callable[[], T_Result],
        mpl_11: typing.Callable[[], T_Result],
        mpl_20_no_copyleft_exception: typing.Callable[[], T_Result],
        mpl_20: typing.Callable[[], T_Result],
        ms_pl: typing.Callable[[], T_Result],
        ms_rl: typing.Callable[[], T_Result],
        mtll: typing.Callable[[], T_Result],
        multics: typing.Callable[[], T_Result],
        mup: typing.Callable[[], T_Result],
        nasa_13: typing.Callable[[], T_Result],
        naumen: typing.Callable[[], T_Result],
        nbpl_10: typing.Callable[[], T_Result],
        ncsa: typing.Callable[[], T_Result],
        net_snmp: typing.Callable[[], T_Result],
        net_cdf: typing.Callable[[], T_Result],
        newsletr: typing.Callable[[], T_Result],
        ngpl: typing.Callable[[], T_Result],
        nlod_10: typing.Callable[[], T_Result],
        nlpl: typing.Callable[[], T_Result],
        nokia: typing.Callable[[], T_Result],
        nosl: typing.Callable[[], T_Result],
        noweb: typing.Callable[[], T_Result],
        npl_10: typing.Callable[[], T_Result],
        npl_11: typing.Callable[[], T_Result],
        nposl_30: typing.Callable[[], T_Result],
        nrl: typing.Callable[[], T_Result],
        ntp: typing.Callable[[], T_Result],
        occt_pl: typing.Callable[[], T_Result],
        oclc_20: typing.Callable[[], T_Result],
        o_db_l_10: typing.Callable[[], T_Result],
        ofl_10: typing.Callable[[], T_Result],
        ofl_11: typing.Callable[[], T_Result],
        ogtsl: typing.Callable[[], T_Result],
        oldap_11: typing.Callable[[], T_Result],
        oldap_12: typing.Callable[[], T_Result],
        oldap_13: typing.Callable[[], T_Result],
        oldap_14: typing.Callable[[], T_Result],
        oldap_201: typing.Callable[[], T_Result],
        oldap_20: typing.Callable[[], T_Result],
        oldap_21: typing.Callable[[], T_Result],
        oldap_221: typing.Callable[[], T_Result],
        oldap_222: typing.Callable[[], T_Result],
        oldap_22: typing.Callable[[], T_Result],
        oldap_23: typing.Callable[[], T_Result],
        oldap_24: typing.Callable[[], T_Result],
        oldap_25: typing.Callable[[], T_Result],
        oldap_26: typing.Callable[[], T_Result],
        oldap_27: typing.Callable[[], T_Result],
        oldap_28: typing.Callable[[], T_Result],
        oml: typing.Callable[[], T_Result],
        open_ssl: typing.Callable[[], T_Result],
        opl_10: typing.Callable[[], T_Result],
        oset_pl_21: typing.Callable[[], T_Result],
        osl_10: typing.Callable[[], T_Result],
        osl_11: typing.Callable[[], T_Result],
        osl_20: typing.Callable[[], T_Result],
        osl_21: typing.Callable[[], T_Result],
        osl_30: typing.Callable[[], T_Result],
        pddl_10: typing.Callable[[], T_Result],
        php_30: typing.Callable[[], T_Result],
        php_301: typing.Callable[[], T_Result],
        plexus: typing.Callable[[], T_Result],
        postgre_sql: typing.Callable[[], T_Result],
        psfrag: typing.Callable[[], T_Result],
        psutils: typing.Callable[[], T_Result],
        python_20: typing.Callable[[], T_Result],
        qhull: typing.Callable[[], T_Result],
        qpl_10: typing.Callable[[], T_Result],
        rdisc: typing.Callable[[], T_Result],
        r_he_cos_11: typing.Callable[[], T_Result],
        rpl_11: typing.Callable[[], T_Result],
        rpl_15: typing.Callable[[], T_Result],
        rpsl_10: typing.Callable[[], T_Result],
        rsa_md: typing.Callable[[], T_Result],
        rscpl: typing.Callable[[], T_Result],
        ruby: typing.Callable[[], T_Result],
        sax_pd: typing.Callable[[], T_Result],
        saxpath: typing.Callable[[], T_Result],
        scea: typing.Callable[[], T_Result],
        sendmail: typing.Callable[[], T_Result],
        sgi_b_10: typing.Callable[[], T_Result],
        sgi_b_11: typing.Callable[[], T_Result],
        sgi_b_20: typing.Callable[[], T_Result],
        sim_pl_20: typing.Callable[[], T_Result],
        sissl_12: typing.Callable[[], T_Result],
        sissl: typing.Callable[[], T_Result],
        sleepycat: typing.Callable[[], T_Result],
        smlnj: typing.Callable[[], T_Result],
        smppl: typing.Callable[[], T_Result],
        snia: typing.Callable[[], T_Result],
        spencer_86: typing.Callable[[], T_Result],
        spencer_94: typing.Callable[[], T_Result],
        spencer_99: typing.Callable[[], T_Result],
        spl_10: typing.Callable[[], T_Result],
        sugar_crm_113: typing.Callable[[], T_Result],
        swl: typing.Callable[[], T_Result],
        tcl: typing.Callable[[], T_Result],
        tcp_wrappers: typing.Callable[[], T_Result],
        t_mate: typing.Callable[[], T_Result],
        torque_11: typing.Callable[[], T_Result],
        tosl: typing.Callable[[], T_Result],
        unicode_dfs_2015: typing.Callable[[], T_Result],
        unicode_dfs_2016: typing.Callable[[], T_Result],
        unicode_tou: typing.Callable[[], T_Result],
        unlicense: typing.Callable[[], T_Result],
        upl_10: typing.Callable[[], T_Result],
        vim: typing.Callable[[], T_Result],
        vostrom: typing.Callable[[], T_Result],
        vsl_10: typing.Callable[[], T_Result],
        w_3_c_19980720: typing.Callable[[], T_Result],
        w_3_c_20150513: typing.Callable[[], T_Result],
        w_3_c: typing.Callable[[], T_Result],
        watcom_10: typing.Callable[[], T_Result],
        wsuipa: typing.Callable[[], T_Result],
        wtfpl: typing.Callable[[], T_Result],
        x_11: typing.Callable[[], T_Result],
        xerox: typing.Callable[[], T_Result],
        x_free_8611: typing.Callable[[], T_Result],
        xinetd: typing.Callable[[], T_Result],
        xnet: typing.Callable[[], T_Result],
        xpp: typing.Callable[[], T_Result],
        x_skat: typing.Callable[[], T_Result],
        ypl_10: typing.Callable[[], T_Result],
        ypl_11: typing.Callable[[], T_Result],
        zed: typing.Callable[[], T_Result],
        zend_20: typing.Callable[[], T_Result],
        zimbra_13: typing.Callable[[], T_Result],
        zimbra_14: typing.Callable[[], T_Result],
        zlib_acknowledgement: typing.Callable[[], T_Result],
        zlib: typing.Callable[[], T_Result],
        zpl_11: typing.Callable[[], T_Result],
        zpl_20: typing.Callable[[], T_Result],
        zpl_21: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is ImplementationGuideLicense.NOT_OPEN_SOURCE:
            return not_open_source()
        if self is ImplementationGuideLicense.ZERO_BSD:
            return zero_bsd()
        if self is ImplementationGuideLicense.AAL:
            return aal()
        if self is ImplementationGuideLicense.ABSTYLES:
            return abstyles()
        if self is ImplementationGuideLicense.ADOBE_2006:
            return adobe_2006()
        if self is ImplementationGuideLicense.ADOBE_GLYPH:
            return adobe_glyph()
        if self is ImplementationGuideLicense.ADSL:
            return adsl()
        if self is ImplementationGuideLicense.AFL_11:
            return afl_11()
        if self is ImplementationGuideLicense.AFL_12:
            return afl_12()
        if self is ImplementationGuideLicense.AFL_20:
            return afl_20()
        if self is ImplementationGuideLicense.AFL_21:
            return afl_21()
        if self is ImplementationGuideLicense.AFL_30:
            return afl_30()
        if self is ImplementationGuideLicense.AFMPARSE:
            return afmparse()
        if self is ImplementationGuideLicense.AGPL_10_ONLY:
            return agpl_10_only()
        if self is ImplementationGuideLicense.AGPL_10_OR_LATER:
            return agpl_10_or_later()
        if self is ImplementationGuideLicense.AGPL_30_ONLY:
            return agpl_30_only()
        if self is ImplementationGuideLicense.AGPL_30_OR_LATER:
            return agpl_30_or_later()
        if self is ImplementationGuideLicense.ALADDIN:
            return aladdin()
        if self is ImplementationGuideLicense.AMDPLPA:
            return amdplpa()
        if self is ImplementationGuideLicense.AML:
            return aml()
        if self is ImplementationGuideLicense.AMPAS:
            return ampas()
        if self is ImplementationGuideLicense.ANTLR_PD:
            return antlr_pd()
        if self is ImplementationGuideLicense.APACHE_10:
            return apache_10()
        if self is ImplementationGuideLicense.APACHE_11:
            return apache_11()
        if self is ImplementationGuideLicense.APACHE_20:
            return apache_20()
        if self is ImplementationGuideLicense.APAFML:
            return apafml()
        if self is ImplementationGuideLicense.APL_10:
            return apl_10()
        if self is ImplementationGuideLicense.APSL_10:
            return apsl_10()
        if self is ImplementationGuideLicense.APSL_11:
            return apsl_11()
        if self is ImplementationGuideLicense.APSL_12:
            return apsl_12()
        if self is ImplementationGuideLicense.APSL_20:
            return apsl_20()
        if self is ImplementationGuideLicense.ARTISTIC_10_CL_8:
            return artistic_10_cl_8()
        if self is ImplementationGuideLicense.ARTISTIC_10_PERL:
            return artistic_10_perl()
        if self is ImplementationGuideLicense.ARTISTIC_10:
            return artistic_10()
        if self is ImplementationGuideLicense.ARTISTIC_20:
            return artistic_20()
        if self is ImplementationGuideLicense.BAHYPH:
            return bahyph()
        if self is ImplementationGuideLicense.BARR:
            return barr()
        if self is ImplementationGuideLicense.BEERWARE:
            return beerware()
        if self is ImplementationGuideLicense.BIT_TORRENT_10:
            return bit_torrent_10()
        if self is ImplementationGuideLicense.BIT_TORRENT_11:
            return bit_torrent_11()
        if self is ImplementationGuideLicense.BORCEUX:
            return borceux()
        if self is ImplementationGuideLicense.BSD_1_CLAUSE:
            return bsd_1_clause()
        if self is ImplementationGuideLicense.BSD_2_CLAUSE_FREE_BSD:
            return bsd_2_clause_free_bsd()
        if self is ImplementationGuideLicense.BSD_2_CLAUSE_NET_BSD:
            return bsd_2_clause_net_bsd()
        if self is ImplementationGuideLicense.BSD_2_CLAUSE_PATENT:
            return bsd_2_clause_patent()
        if self is ImplementationGuideLicense.BSD_2_CLAUSE:
            return bsd_2_clause()
        if self is ImplementationGuideLicense.BSD_3_CLAUSE_ATTRIBUTION:
            return bsd_3_clause_attribution()
        if self is ImplementationGuideLicense.BSD_3_CLAUSE_CLEAR:
            return bsd_3_clause_clear()
        if self is ImplementationGuideLicense.BSD_3_CLAUSE_LBNL:
            return bsd_3_clause_lbnl()
        if self is ImplementationGuideLicense.BSD_3_CLAUSE_NO_NUCLEAR_LICENSE_2014:
            return bsd_3_clause_no_nuclear_license_2014()
        if self is ImplementationGuideLicense.BSD_3_CLAUSE_NO_NUCLEAR_LICENSE:
            return bsd_3_clause_no_nuclear_license()
        if self is ImplementationGuideLicense.BSD_3_CLAUSE_NO_NUCLEAR_WARRANTY:
            return bsd_3_clause_no_nuclear_warranty()
        if self is ImplementationGuideLicense.BSD_3_CLAUSE:
            return bsd_3_clause()
        if self is ImplementationGuideLicense.BSD_4_CLAUSE_UC:
            return bsd_4_clause_uc()
        if self is ImplementationGuideLicense.BSD_4_CLAUSE:
            return bsd_4_clause()
        if self is ImplementationGuideLicense.BSD_PROTECTION:
            return bsd_protection()
        if self is ImplementationGuideLicense.BSD_SOURCE_CODE:
            return bsd_source_code()
        if self is ImplementationGuideLicense.BSL_10:
            return bsl_10()
        if self is ImplementationGuideLicense.BZIP_2105:
            return bzip_2105()
        if self is ImplementationGuideLicense.BZIP_2106:
            return bzip_2106()
        if self is ImplementationGuideLicense.CALDERA:
            return caldera()
        if self is ImplementationGuideLicense.CATOSL_11:
            return catosl_11()
        if self is ImplementationGuideLicense.CC_BY_10:
            return cc_by_10()
        if self is ImplementationGuideLicense.CC_BY_20:
            return cc_by_20()
        if self is ImplementationGuideLicense.CC_BY_25:
            return cc_by_25()
        if self is ImplementationGuideLicense.CC_BY_30:
            return cc_by_30()
        if self is ImplementationGuideLicense.CC_BY_40:
            return cc_by_40()
        if self is ImplementationGuideLicense.CC_BY_NC_10:
            return cc_by_nc_10()
        if self is ImplementationGuideLicense.CC_BY_NC_20:
            return cc_by_nc_20()
        if self is ImplementationGuideLicense.CC_BY_NC_25:
            return cc_by_nc_25()
        if self is ImplementationGuideLicense.CC_BY_NC_30:
            return cc_by_nc_30()
        if self is ImplementationGuideLicense.CC_BY_NC_40:
            return cc_by_nc_40()
        if self is ImplementationGuideLicense.CC_BY_NC_ND_10:
            return cc_by_nc_nd_10()
        if self is ImplementationGuideLicense.CC_BY_NC_ND_20:
            return cc_by_nc_nd_20()
        if self is ImplementationGuideLicense.CC_BY_NC_ND_25:
            return cc_by_nc_nd_25()
        if self is ImplementationGuideLicense.CC_BY_NC_ND_30:
            return cc_by_nc_nd_30()
        if self is ImplementationGuideLicense.CC_BY_NC_ND_40:
            return cc_by_nc_nd_40()
        if self is ImplementationGuideLicense.CC_BY_NC_SA_10:
            return cc_by_nc_sa_10()
        if self is ImplementationGuideLicense.CC_BY_NC_SA_20:
            return cc_by_nc_sa_20()
        if self is ImplementationGuideLicense.CC_BY_NC_SA_25:
            return cc_by_nc_sa_25()
        if self is ImplementationGuideLicense.CC_BY_NC_SA_30:
            return cc_by_nc_sa_30()
        if self is ImplementationGuideLicense.CC_BY_NC_SA_40:
            return cc_by_nc_sa_40()
        if self is ImplementationGuideLicense.CC_BY_ND_10:
            return cc_by_nd_10()
        if self is ImplementationGuideLicense.CC_BY_ND_20:
            return cc_by_nd_20()
        if self is ImplementationGuideLicense.CC_BY_ND_25:
            return cc_by_nd_25()
        if self is ImplementationGuideLicense.CC_BY_ND_30:
            return cc_by_nd_30()
        if self is ImplementationGuideLicense.CC_BY_ND_40:
            return cc_by_nd_40()
        if self is ImplementationGuideLicense.CC_BY_SA_10:
            return cc_by_sa_10()
        if self is ImplementationGuideLicense.CC_BY_SA_20:
            return cc_by_sa_20()
        if self is ImplementationGuideLicense.CC_BY_SA_25:
            return cc_by_sa_25()
        if self is ImplementationGuideLicense.CC_BY_SA_30:
            return cc_by_sa_30()
        if self is ImplementationGuideLicense.CC_BY_SA_40:
            return cc_by_sa_40()
        if self is ImplementationGuideLicense.CC_010:
            return cc_010()
        if self is ImplementationGuideLicense.CDDL_10:
            return cddl_10()
        if self is ImplementationGuideLicense.CDDL_11:
            return cddl_11()
        if self is ImplementationGuideLicense.CDLA_PERMISSIVE_10:
            return cdla_permissive_10()
        if self is ImplementationGuideLicense.CDLA_SHARING_10:
            return cdla_sharing_10()
        if self is ImplementationGuideLicense.CECILL_10:
            return cecill_10()
        if self is ImplementationGuideLicense.CECILL_11:
            return cecill_11()
        if self is ImplementationGuideLicense.CECILL_20:
            return cecill_20()
        if self is ImplementationGuideLicense.CECILL_21:
            return cecill_21()
        if self is ImplementationGuideLicense.CECILL_B:
            return cecill_b()
        if self is ImplementationGuideLicense.CECILL_C:
            return cecill_c()
        if self is ImplementationGuideLicense.CL_ARTISTIC:
            return cl_artistic()
        if self is ImplementationGuideLicense.CNRI_JYTHON:
            return cnri_jython()
        if self is ImplementationGuideLicense.CNRI_PYTHON_GPL_COMPATIBLE:
            return cnri_python_gpl_compatible()
        if self is ImplementationGuideLicense.CNRI_PYTHON:
            return cnri_python()
        if self is ImplementationGuideLicense.CONDOR_11:
            return condor_11()
        if self is ImplementationGuideLicense.CPAL_10:
            return cpal_10()
        if self is ImplementationGuideLicense.CPL_10:
            return cpl_10()
        if self is ImplementationGuideLicense.CPOL_102:
            return cpol_102()
        if self is ImplementationGuideLicense.CROSSWORD:
            return crossword()
        if self is ImplementationGuideLicense.CRYSTAL_STACKER:
            return crystal_stacker()
        if self is ImplementationGuideLicense.CUA_OPL_10:
            return cua_opl_10()
        if self is ImplementationGuideLicense.CUBE:
            return cube()
        if self is ImplementationGuideLicense.CURL:
            return curl()
        if self is ImplementationGuideLicense.D_FSL_10:
            return d_fsl_10()
        if self is ImplementationGuideLicense.DIFFMARK:
            return diffmark()
        if self is ImplementationGuideLicense.DOC:
            return doc()
        if self is ImplementationGuideLicense.DOTSEQN:
            return dotseqn()
        if self is ImplementationGuideLicense.DSDP:
            return dsdp()
        if self is ImplementationGuideLicense.DVIPDFM:
            return dvipdfm()
        if self is ImplementationGuideLicense.ECL_10:
            return ecl_10()
        if self is ImplementationGuideLicense.ECL_20:
            return ecl_20()
        if self is ImplementationGuideLicense.EFL_10:
            return efl_10()
        if self is ImplementationGuideLicense.EFL_20:
            return efl_20()
        if self is ImplementationGuideLicense.E_GENIX:
            return e_genix()
        if self is ImplementationGuideLicense.ENTESSA:
            return entessa()
        if self is ImplementationGuideLicense.EPL_10:
            return epl_10()
        if self is ImplementationGuideLicense.EPL_20:
            return epl_20()
        if self is ImplementationGuideLicense.ERL_PL_11:
            return erl_pl_11()
        if self is ImplementationGuideLicense.EU_DATAGRID:
            return eu_datagrid()
        if self is ImplementationGuideLicense.EUPL_10:
            return eupl_10()
        if self is ImplementationGuideLicense.EUPL_11:
            return eupl_11()
        if self is ImplementationGuideLicense.EUPL_12:
            return eupl_12()
        if self is ImplementationGuideLicense.EUROSYM:
            return eurosym()
        if self is ImplementationGuideLicense.FAIR:
            return fair()
        if self is ImplementationGuideLicense.FRAMEWORX_10:
            return frameworx_10()
        if self is ImplementationGuideLicense.FREE_IMAGE:
            return free_image()
        if self is ImplementationGuideLicense.FSFAP:
            return fsfap()
        if self is ImplementationGuideLicense.FSFUL:
            return fsful()
        if self is ImplementationGuideLicense.FSFULLR:
            return fsfullr()
        if self is ImplementationGuideLicense.FTL:
            return ftl()
        if self is ImplementationGuideLicense.GFDL_11_ONLY:
            return gfdl_11_only()
        if self is ImplementationGuideLicense.GFDL_11_OR_LATER:
            return gfdl_11_or_later()
        if self is ImplementationGuideLicense.GFDL_12_ONLY:
            return gfdl_12_only()
        if self is ImplementationGuideLicense.GFDL_12_OR_LATER:
            return gfdl_12_or_later()
        if self is ImplementationGuideLicense.GFDL_13_ONLY:
            return gfdl_13_only()
        if self is ImplementationGuideLicense.GFDL_13_OR_LATER:
            return gfdl_13_or_later()
        if self is ImplementationGuideLicense.GIFTWARE:
            return giftware()
        if self is ImplementationGuideLicense.GL_2_PS:
            return gl_2_ps()
        if self is ImplementationGuideLicense.GLIDE:
            return glide()
        if self is ImplementationGuideLicense.GLULXE:
            return glulxe()
        if self is ImplementationGuideLicense.GNUPLOT:
            return gnuplot()
        if self is ImplementationGuideLicense.GPL_10_ONLY:
            return gpl_10_only()
        if self is ImplementationGuideLicense.GPL_10_OR_LATER:
            return gpl_10_or_later()
        if self is ImplementationGuideLicense.GPL_20_ONLY:
            return gpl_20_only()
        if self is ImplementationGuideLicense.GPL_20_OR_LATER:
            return gpl_20_or_later()
        if self is ImplementationGuideLicense.GPL_30_ONLY:
            return gpl_30_only()
        if self is ImplementationGuideLicense.GPL_30_OR_LATER:
            return gpl_30_or_later()
        if self is ImplementationGuideLicense.G_SOAP_13_B:
            return g_soap_13_b()
        if self is ImplementationGuideLicense.HASKELL_REPORT:
            return haskell_report()
        if self is ImplementationGuideLicense.HPND:
            return hpnd()
        if self is ImplementationGuideLicense.IBM_PIBS:
            return ibm_pibs()
        if self is ImplementationGuideLicense.ICU:
            return icu()
        if self is ImplementationGuideLicense.IJG:
            return ijg()
        if self is ImplementationGuideLicense.IMAGE_MAGICK:
            return image_magick()
        if self is ImplementationGuideLicense.I_MATIX:
            return i_matix()
        if self is ImplementationGuideLicense.IMLIB_2:
            return imlib_2()
        if self is ImplementationGuideLicense.INFO_ZIP:
            return info_zip()
        if self is ImplementationGuideLicense.INTEL_ACPI:
            return intel_acpi()
        if self is ImplementationGuideLicense.INTEL:
            return intel()
        if self is ImplementationGuideLicense.INTERBASE_10:
            return interbase_10()
        if self is ImplementationGuideLicense.IPA:
            return ipa()
        if self is ImplementationGuideLicense.IPL_10:
            return ipl_10()
        if self is ImplementationGuideLicense.ISC:
            return isc()
        if self is ImplementationGuideLicense.JAS_PER_20:
            return jas_per_20()
        if self is ImplementationGuideLicense.JSON:
            return json()
        if self is ImplementationGuideLicense.LAL_12:
            return lal_12()
        if self is ImplementationGuideLicense.LAL_13:
            return lal_13()
        if self is ImplementationGuideLicense.LATEX_2_E:
            return latex_2_e()
        if self is ImplementationGuideLicense.LEPTONICA:
            return leptonica()
        if self is ImplementationGuideLicense.LGPL_20_ONLY:
            return lgpl_20_only()
        if self is ImplementationGuideLicense.LGPL_20_OR_LATER:
            return lgpl_20_or_later()
        if self is ImplementationGuideLicense.LGPL_21_ONLY:
            return lgpl_21_only()
        if self is ImplementationGuideLicense.LGPL_21_OR_LATER:
            return lgpl_21_or_later()
        if self is ImplementationGuideLicense.LGPL_30_ONLY:
            return lgpl_30_only()
        if self is ImplementationGuideLicense.LGPL_30_OR_LATER:
            return lgpl_30_or_later()
        if self is ImplementationGuideLicense.LGPLLR:
            return lgpllr()
        if self is ImplementationGuideLicense.LIBPNG:
            return libpng()
        if self is ImplementationGuideLicense.LIBTIFF:
            return libtiff()
        if self is ImplementationGuideLicense.LI_LI_QP_11:
            return li_li_qp_11()
        if self is ImplementationGuideLicense.LI_LI_QR_11:
            return li_li_qr_11()
        if self is ImplementationGuideLicense.LI_LI_Q_RPLUS_11:
            return li_li_q_rplus_11()
        if self is ImplementationGuideLicense.LINUX_OPEN_IB:
            return linux_open_ib()
        if self is ImplementationGuideLicense.LPL_10:
            return lpl_10()
        if self is ImplementationGuideLicense.LPL_102:
            return lpl_102()
        if self is ImplementationGuideLicense.LPPL_10:
            return lppl_10()
        if self is ImplementationGuideLicense.LPPL_11:
            return lppl_11()
        if self is ImplementationGuideLicense.LPPL_12:
            return lppl_12()
        if self is ImplementationGuideLicense.LPPL_13_A:
            return lppl_13_a()
        if self is ImplementationGuideLicense.LPPL_13_C:
            return lppl_13_c()
        if self is ImplementationGuideLicense.MAKE_INDEX:
            return make_index()
        if self is ImplementationGuideLicense.MIR_OS:
            return mir_os()
        if self is ImplementationGuideLicense.MIT_0:
            return mit_0()
        if self is ImplementationGuideLicense.MIT_ADVERTISING:
            return mit_advertising()
        if self is ImplementationGuideLicense.MIT_CMU:
            return mit_cmu()
        if self is ImplementationGuideLicense.MIT_ENNA:
            return mit_enna()
        if self is ImplementationGuideLicense.MIT_FEH:
            return mit_feh()
        if self is ImplementationGuideLicense.MIT:
            return mit()
        if self is ImplementationGuideLicense.MITNFA:
            return mitnfa()
        if self is ImplementationGuideLicense.MOTOSOTO:
            return motosoto()
        if self is ImplementationGuideLicense.MPICH_2:
            return mpich_2()
        if self is ImplementationGuideLicense.MPL_10:
            return mpl_10()
        if self is ImplementationGuideLicense.MPL_11:
            return mpl_11()
        if self is ImplementationGuideLicense.MPL_20_NO_COPYLEFT_EXCEPTION:
            return mpl_20_no_copyleft_exception()
        if self is ImplementationGuideLicense.MPL_20:
            return mpl_20()
        if self is ImplementationGuideLicense.MS_PL:
            return ms_pl()
        if self is ImplementationGuideLicense.MS_RL:
            return ms_rl()
        if self is ImplementationGuideLicense.MTLL:
            return mtll()
        if self is ImplementationGuideLicense.MULTICS:
            return multics()
        if self is ImplementationGuideLicense.MUP:
            return mup()
        if self is ImplementationGuideLicense.NASA_13:
            return nasa_13()
        if self is ImplementationGuideLicense.NAUMEN:
            return naumen()
        if self is ImplementationGuideLicense.NBPL_10:
            return nbpl_10()
        if self is ImplementationGuideLicense.NCSA:
            return ncsa()
        if self is ImplementationGuideLicense.NET_SNMP:
            return net_snmp()
        if self is ImplementationGuideLicense.NET_CDF:
            return net_cdf()
        if self is ImplementationGuideLicense.NEWSLETR:
            return newsletr()
        if self is ImplementationGuideLicense.NGPL:
            return ngpl()
        if self is ImplementationGuideLicense.NLOD_10:
            return nlod_10()
        if self is ImplementationGuideLicense.NLPL:
            return nlpl()
        if self is ImplementationGuideLicense.NOKIA:
            return nokia()
        if self is ImplementationGuideLicense.NOSL:
            return nosl()
        if self is ImplementationGuideLicense.NOWEB:
            return noweb()
        if self is ImplementationGuideLicense.NPL_10:
            return npl_10()
        if self is ImplementationGuideLicense.NPL_11:
            return npl_11()
        if self is ImplementationGuideLicense.NPOSL_30:
            return nposl_30()
        if self is ImplementationGuideLicense.NRL:
            return nrl()
        if self is ImplementationGuideLicense.NTP:
            return ntp()
        if self is ImplementationGuideLicense.OCCT_PL:
            return occt_pl()
        if self is ImplementationGuideLicense.OCLC_20:
            return oclc_20()
        if self is ImplementationGuideLicense.O_DB_L_10:
            return o_db_l_10()
        if self is ImplementationGuideLicense.OFL_10:
            return ofl_10()
        if self is ImplementationGuideLicense.OFL_11:
            return ofl_11()
        if self is ImplementationGuideLicense.OGTSL:
            return ogtsl()
        if self is ImplementationGuideLicense.OLDAP_11:
            return oldap_11()
        if self is ImplementationGuideLicense.OLDAP_12:
            return oldap_12()
        if self is ImplementationGuideLicense.OLDAP_13:
            return oldap_13()
        if self is ImplementationGuideLicense.OLDAP_14:
            return oldap_14()
        if self is ImplementationGuideLicense.OLDAP_201:
            return oldap_201()
        if self is ImplementationGuideLicense.OLDAP_20:
            return oldap_20()
        if self is ImplementationGuideLicense.OLDAP_21:
            return oldap_21()
        if self is ImplementationGuideLicense.OLDAP_221:
            return oldap_221()
        if self is ImplementationGuideLicense.OLDAP_222:
            return oldap_222()
        if self is ImplementationGuideLicense.OLDAP_22:
            return oldap_22()
        if self is ImplementationGuideLicense.OLDAP_23:
            return oldap_23()
        if self is ImplementationGuideLicense.OLDAP_24:
            return oldap_24()
        if self is ImplementationGuideLicense.OLDAP_25:
            return oldap_25()
        if self is ImplementationGuideLicense.OLDAP_26:
            return oldap_26()
        if self is ImplementationGuideLicense.OLDAP_27:
            return oldap_27()
        if self is ImplementationGuideLicense.OLDAP_28:
            return oldap_28()
        if self is ImplementationGuideLicense.OML:
            return oml()
        if self is ImplementationGuideLicense.OPEN_SSL:
            return open_ssl()
        if self is ImplementationGuideLicense.OPL_10:
            return opl_10()
        if self is ImplementationGuideLicense.OSET_PL_21:
            return oset_pl_21()
        if self is ImplementationGuideLicense.OSL_10:
            return osl_10()
        if self is ImplementationGuideLicense.OSL_11:
            return osl_11()
        if self is ImplementationGuideLicense.OSL_20:
            return osl_20()
        if self is ImplementationGuideLicense.OSL_21:
            return osl_21()
        if self is ImplementationGuideLicense.OSL_30:
            return osl_30()
        if self is ImplementationGuideLicense.PDDL_10:
            return pddl_10()
        if self is ImplementationGuideLicense.PHP_30:
            return php_30()
        if self is ImplementationGuideLicense.PHP_301:
            return php_301()
        if self is ImplementationGuideLicense.PLEXUS:
            return plexus()
        if self is ImplementationGuideLicense.POSTGRE_SQL:
            return postgre_sql()
        if self is ImplementationGuideLicense.PSFRAG:
            return psfrag()
        if self is ImplementationGuideLicense.PSUTILS:
            return psutils()
        if self is ImplementationGuideLicense.PYTHON_20:
            return python_20()
        if self is ImplementationGuideLicense.QHULL:
            return qhull()
        if self is ImplementationGuideLicense.QPL_10:
            return qpl_10()
        if self is ImplementationGuideLicense.RDISC:
            return rdisc()
        if self is ImplementationGuideLicense.R_HE_COS_11:
            return r_he_cos_11()
        if self is ImplementationGuideLicense.RPL_11:
            return rpl_11()
        if self is ImplementationGuideLicense.RPL_15:
            return rpl_15()
        if self is ImplementationGuideLicense.RPSL_10:
            return rpsl_10()
        if self is ImplementationGuideLicense.RSA_MD:
            return rsa_md()
        if self is ImplementationGuideLicense.RSCPL:
            return rscpl()
        if self is ImplementationGuideLicense.RUBY:
            return ruby()
        if self is ImplementationGuideLicense.SAX_PD:
            return sax_pd()
        if self is ImplementationGuideLicense.SAXPATH:
            return saxpath()
        if self is ImplementationGuideLicense.SCEA:
            return scea()
        if self is ImplementationGuideLicense.SENDMAIL:
            return sendmail()
        if self is ImplementationGuideLicense.SGI_B_10:
            return sgi_b_10()
        if self is ImplementationGuideLicense.SGI_B_11:
            return sgi_b_11()
        if self is ImplementationGuideLicense.SGI_B_20:
            return sgi_b_20()
        if self is ImplementationGuideLicense.SIM_PL_20:
            return sim_pl_20()
        if self is ImplementationGuideLicense.SISSL_12:
            return sissl_12()
        if self is ImplementationGuideLicense.SISSL:
            return sissl()
        if self is ImplementationGuideLicense.SLEEPYCAT:
            return sleepycat()
        if self is ImplementationGuideLicense.SMLNJ:
            return smlnj()
        if self is ImplementationGuideLicense.SMPPL:
            return smppl()
        if self is ImplementationGuideLicense.SNIA:
            return snia()
        if self is ImplementationGuideLicense.SPENCER_86:
            return spencer_86()
        if self is ImplementationGuideLicense.SPENCER_94:
            return spencer_94()
        if self is ImplementationGuideLicense.SPENCER_99:
            return spencer_99()
        if self is ImplementationGuideLicense.SPL_10:
            return spl_10()
        if self is ImplementationGuideLicense.SUGAR_CRM_113:
            return sugar_crm_113()
        if self is ImplementationGuideLicense.SWL:
            return swl()
        if self is ImplementationGuideLicense.TCL:
            return tcl()
        if self is ImplementationGuideLicense.TCP_WRAPPERS:
            return tcp_wrappers()
        if self is ImplementationGuideLicense.T_MATE:
            return t_mate()
        if self is ImplementationGuideLicense.TORQUE_11:
            return torque_11()
        if self is ImplementationGuideLicense.TOSL:
            return tosl()
        if self is ImplementationGuideLicense.UNICODE_DFS_2015:
            return unicode_dfs_2015()
        if self is ImplementationGuideLicense.UNICODE_DFS_2016:
            return unicode_dfs_2016()
        if self is ImplementationGuideLicense.UNICODE_TOU:
            return unicode_tou()
        if self is ImplementationGuideLicense.UNLICENSE:
            return unlicense()
        if self is ImplementationGuideLicense.UPL_10:
            return upl_10()
        if self is ImplementationGuideLicense.VIM:
            return vim()
        if self is ImplementationGuideLicense.VOSTROM:
            return vostrom()
        if self is ImplementationGuideLicense.VSL_10:
            return vsl_10()
        if self is ImplementationGuideLicense.W_3_C_19980720:
            return w_3_c_19980720()
        if self is ImplementationGuideLicense.W_3_C_20150513:
            return w_3_c_20150513()
        if self is ImplementationGuideLicense.W_3_C:
            return w_3_c()
        if self is ImplementationGuideLicense.WATCOM_10:
            return watcom_10()
        if self is ImplementationGuideLicense.WSUIPA:
            return wsuipa()
        if self is ImplementationGuideLicense.WTFPL:
            return wtfpl()
        if self is ImplementationGuideLicense.X_11:
            return x_11()
        if self is ImplementationGuideLicense.XEROX:
            return xerox()
        if self is ImplementationGuideLicense.X_FREE_8611:
            return x_free_8611()
        if self is ImplementationGuideLicense.XINETD:
            return xinetd()
        if self is ImplementationGuideLicense.XNET:
            return xnet()
        if self is ImplementationGuideLicense.XPP:
            return xpp()
        if self is ImplementationGuideLicense.X_SKAT:
            return x_skat()
        if self is ImplementationGuideLicense.YPL_10:
            return ypl_10()
        if self is ImplementationGuideLicense.YPL_11:
            return ypl_11()
        if self is ImplementationGuideLicense.ZED:
            return zed()
        if self is ImplementationGuideLicense.ZEND_20:
            return zend_20()
        if self is ImplementationGuideLicense.ZIMBRA_13:
            return zimbra_13()
        if self is ImplementationGuideLicense.ZIMBRA_14:
            return zimbra_14()
        if self is ImplementationGuideLicense.ZLIB_ACKNOWLEDGEMENT:
            return zlib_acknowledgement()
        if self is ImplementationGuideLicense.ZLIB:
            return zlib()
        if self is ImplementationGuideLicense.ZPL_11:
            return zpl_11()
        if self is ImplementationGuideLicense.ZPL_20:
            return zpl_20()
        if self is ImplementationGuideLicense.ZPL_21:
            return zpl_21()
