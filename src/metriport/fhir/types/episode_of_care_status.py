# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class EpisodeOfCareStatus(str, enum.Enum):
    """
    planned | waitlist | active | onhold | finished | cancelled.
    """

    PLANNED = "planned"
    WAITLIST = "waitlist"
    ACTIVE = "active"
    ONHOLD = "onhold"
    FINISHED = "finished"
    CANCELLED = "cancelled"
    ENTERED_IN_ERROR = "entered-in-error"

    def visit(
        self,
        planned: typing.Callable[[], T_Result],
        waitlist: typing.Callable[[], T_Result],
        active: typing.Callable[[], T_Result],
        onhold: typing.Callable[[], T_Result],
        finished: typing.Callable[[], T_Result],
        cancelled: typing.Callable[[], T_Result],
        entered_in_error: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is EpisodeOfCareStatus.PLANNED:
            return planned()
        if self is EpisodeOfCareStatus.WAITLIST:
            return waitlist()
        if self is EpisodeOfCareStatus.ACTIVE:
            return active()
        if self is EpisodeOfCareStatus.ONHOLD:
            return onhold()
        if self is EpisodeOfCareStatus.FINISHED:
            return finished()
        if self is EpisodeOfCareStatus.CANCELLED:
            return cancelled()
        if self is EpisodeOfCareStatus.ENTERED_IN_ERROR:
            return entered_in_error()
