# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class EffectEvidenceSynthesisResultsByExposureExposureState(str, enum.Enum):
    """
    Whether these results are for the exposure state or alternative exposure state.
    """

    EXPOSURE = "exposure"
    EXPOSURE_ALTERNATIVE = "exposure-alternative"

    def visit(
        self, exposure: typing.Callable[[], T_Result], exposure_alternative: typing.Callable[[], T_Result]
    ) -> T_Result:
        if self is EffectEvidenceSynthesisResultsByExposureExposureState.EXPOSURE:
            return exposure()
        if self is EffectEvidenceSynthesisResultsByExposureExposureState.EXPOSURE_ALTERNATIVE:
            return exposure_alternative()
