# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from .date_time import DateTime
from .markdown import Markdown

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Annotation(pydantic.BaseModel):
    """
    A text note which also contains information about who made the statement and when.
    """

    id: typing.Optional[str] = pydantic.Field(
        default=None,
        description="Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
    )
    extension: typing.Optional[typing.List[Extension]] = pydantic.Field(
        default=None,
        description="May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
    )
    author_reference: typing.Optional[Reference] = pydantic.Field(
        alias="authorReference", default=None, description="The individual responsible for making the annotation."
    )
    author_string: typing.Optional[str] = pydantic.Field(
        alias="authorString", default=None, description="The individual responsible for making the annotation."
    )
    time: typing.Optional[DateTime] = pydantic.Field(
        default=None, description="Indicates when this particular annotation was made."
    )
    text: typing.Optional[Markdown] = pydantic.Field(
        default=None, description="The text of the annotation in markdown format."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}


from .extension import Extension  # noqa: E402
from .reference import Reference  # noqa: E402

Annotation.update_forward_refs()
