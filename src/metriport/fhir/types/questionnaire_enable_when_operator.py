# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class QuestionnaireEnableWhenOperator(str, enum.Enum):
    """
    Specifies the criteria by which the question is enabled.
    """

    EXISTS = "exists"
    EQUAL = "="
    NOT_EQUAL = "!="
    GREATER_THAN = ">"
    LESS_THAN = "<"
    GREATER_THAN_OR_EQUAL_TO = ">="
    LESS_THAN_OR_EQUAL_TO = "<="

    def visit(
        self,
        exists: typing.Callable[[], T_Result],
        equal: typing.Callable[[], T_Result],
        not_equal: typing.Callable[[], T_Result],
        greater_than: typing.Callable[[], T_Result],
        less_than: typing.Callable[[], T_Result],
        greater_than_or_equal_to: typing.Callable[[], T_Result],
        less_than_or_equal_to: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is QuestionnaireEnableWhenOperator.EXISTS:
            return exists()
        if self is QuestionnaireEnableWhenOperator.EQUAL:
            return equal()
        if self is QuestionnaireEnableWhenOperator.NOT_EQUAL:
            return not_equal()
        if self is QuestionnaireEnableWhenOperator.GREATER_THAN:
            return greater_than()
        if self is QuestionnaireEnableWhenOperator.LESS_THAN:
            return less_than()
        if self is QuestionnaireEnableWhenOperator.GREATER_THAN_OR_EQUAL_TO:
            return greater_than_or_equal_to()
        if self is QuestionnaireEnableWhenOperator.LESS_THAN_OR_EQUAL_TO:
            return less_than_or_equal_to()
