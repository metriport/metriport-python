# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class EndpointStatus(str, enum.Enum):
    """
    active | suspended | error | off | test.
    """

    ACTIVE = "active"
    SUSPENDED = "suspended"
    ERROR = "error"
    OFF = "off"
    ENTERED_IN_ERROR = "entered-in-error"
    TEST = "test"

    def visit(
        self,
        active: typing.Callable[[], T_Result],
        suspended: typing.Callable[[], T_Result],
        error: typing.Callable[[], T_Result],
        off: typing.Callable[[], T_Result],
        entered_in_error: typing.Callable[[], T_Result],
        test: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is EndpointStatus.ACTIVE:
            return active()
        if self is EndpointStatus.SUSPENDED:
            return suspended()
        if self is EndpointStatus.ERROR:
            return error()
        if self is EndpointStatus.OFF:
            return off()
        if self is EndpointStatus.ENTERED_IN_ERROR:
            return entered_in_error()
        if self is EndpointStatus.TEST:
            return test()
