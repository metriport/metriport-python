# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class ElementDefinitionDiscriminatorType(str, enum.Enum):
    """
    How the element value is interpreted when discrimination is evaluated.
    """

    VALUE = "value"
    EXISTS = "exists"
    PATTERN = "pattern"
    TYPE = "type"
    PROFILE = "profile"

    def visit(
        self,
        value: typing.Callable[[], T_Result],
        exists: typing.Callable[[], T_Result],
        pattern: typing.Callable[[], T_Result],
        type: typing.Callable[[], T_Result],
        profile: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is ElementDefinitionDiscriminatorType.VALUE:
            return value()
        if self is ElementDefinitionDiscriminatorType.EXISTS:
            return exists()
        if self is ElementDefinitionDiscriminatorType.PATTERN:
            return pattern()
        if self is ElementDefinitionDiscriminatorType.TYPE:
            return type()
        if self is ElementDefinitionDiscriminatorType.PROFILE:
            return profile()
